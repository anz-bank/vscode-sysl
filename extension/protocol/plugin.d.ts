/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * General request wrapper for all specific request and response types.
 */
export type RequestOrResponse = Request | Response;

/**
 * General wrapper for all responses.
 */
export interface Request {
  initialize?: InitializeRequest;
  onchange?: OnChangeRequest;
  [k: string]: unknown;
}
export interface InitializeRequest {
  capabilities?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface OnChangeRequest {
  context?: Context;
  change?: Change;
  [k: string]: unknown;
}
export interface Context {
  /**
   * The path to the client's currently focused file.
   */
  filePath?: string;
  /**
   * The content of the focused file.
   */
  fileContent?: string;
  /**
   * The Sysl module encoded in the focused file.
   */
  module?: string;
  /**
   * The path to the Sysl root.
   */
  syslRoot?: string;
  /**
   * The specific position on which the client is focused.
   */
  focus?: {
    src?: string;
    app?: string[];
    type?: string;
    field?: string;
    anno?: string;
    tag?: string;
    endpoint?: string;
    stmt?: string;
    param?: string;
    [k: string]: unknown;
  };
  /**
   * The state of relevant settings in the client.
   */
  settings?: {
    [k: string]: unknown;
  };
  /**
   * The ID of the view where the change occurred.
   */
  viewId?: string;
  [k: string]: unknown;
}
/**
 * Represents a single change to a single file in the client that the plugin may react to.
 */
export interface Change {
  /**
   * The surface in the client where the change originated.
   */
  source?: "UNSPECIFIED_SOURCE" | "TEXT" | "DIAGRAM" | "CUSTOM";
  /**
   * The action that caused the change.
   */
  action?:
    | "UNSPECIFIED_ACTION"
    | "ADD"
    | "MODIFY"
    | "REMOVE"
    | "CREATE_FILE"
    | "SAVE_FILE"
    | "DELETE_FILE";
  /**
   * The path to the file that changed.
   */
  filePath?: string;
  detail?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * General wrapper for all responses.
 */
export interface Response {
  error?: Error;
  initialize?: InitializeResponse;
  onchange?: OnChangeResponse;
  [k: string]: unknown;
}
export interface Error {
  code?: number;
  message?: string;
  data?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface InitializeResponse {
  capabilities?: ServerCapabilities;
  [k: string]: unknown;
}
export interface ServerCapabilities {
  diagrams?: DiagramCapabilities;
  [k: string]: unknown;
}
export interface DiagramCapabilities {
  availabilities?: {
    type?: {
      id?: string;
      name?: string;
      description?: string;
      icon?: string;
      [k: string]: unknown;
    };
    /**
     * Whether this diagram type is available from this plugin.
     */
    available?: boolean;
    /**
     * If not available, the reason why.
     */
    reason?: string;
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
export interface OnChangeResponse {
  renderDiagram?: Diagram[];
  [k: string]: unknown;
}
export interface Diagram {
  type?: {
    id?: string;
    name?: string;
    description?: string;
    icon?: string;
    [k: string]: unknown;
  };
  content?: DiagramData;
  [k: string]: unknown;
}
/**
 * The content of a diagram.
 */
export interface DiagramData {
  nodes?: Node[];
  edges?: Edge[];
  templates?: TemplateData;
  [k: string]: unknown;
}
export interface Node {
  [k: string]: unknown;
}
export interface Edge {
  [k: string]: unknown;
}
export interface TemplateData {
  diagramLabel?: string;
  diagramLayout?: TemplateLayoutData;
  nodes?: {
    [k: string]: TemplateNodeData;
  };
  groups?: {
    [k: string]: TemplateGroupData;
  };
  edges?: {
    [k: string]: TemplateEdgeData;
  };
  [k: string]: unknown;
}
export interface TemplateLayoutData {
  [k: string]: unknown;
}
export interface TemplateNodeData {
  shadow?: TemplateShadowData;
  sections?: TemplateSectionData[];
  [k: string]: unknown;
}
export interface TemplateShadowData {
  shadowOffset?: {
    [k: string]: number;
  };
  shadowBlur?: number;
  shadowColor?: string;
  [k: string]: unknown;
}
export interface TemplateSectionData {
  panelType?: string;
  desiredSize?: {
    [k: string]: number;
  };
  background?: string;
  mainPanel?: boolean;
  height?: number;
  padding?: number;
  stretch?: boolean;
  minSize?: {
    [k: string]: number;
  };
  width?: number;
  shape?: TemplateShape;
  text?: TemplateTextBlock;
  sections?: TemplateSectionData[];
  [k: string]: unknown;
}
export interface TemplateShape {
  shapeType?: string;
  fill?: string;
  strokeWidth?: number;
  stroke?: string;
  toArrow?: string;
  [k: string]: unknown;
}
export interface TemplateTextBlock {
  align?: "start" | "end" | "left" | "right" | "center";
  font?: string;
  label?: string;
  margin?: string;
  maxLines?: number;
  stroke?: string;
  stretch?: boolean;
  segmentOffset?: {
    [k: string]: number;
  };
  [k: string]: unknown;
}
export interface TemplateGroupData {
  shadow?: TemplateShadowData;
  expanded?: TemplateSectionData[];
  collapsed?: TemplateSectionData[];
  [k: string]: unknown;
}
export interface TemplateEdgeData {
  corner?: number;
  pathShape?: TemplateShape;
  arrowShape?: TemplateShape;
  text?: TemplateTextBlock;
  [k: string]: unknown;
}
